{% set local_run = false %}

substitutions:
  name: "hvaccontroller"
  friendly_name: "HvacController"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  min_version: 2024.11.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
    build_flags: "-DBOARD_HAS_PSRAM"
    board_upload.maximum_ram_size: 524288

{% if local_run %}
host:
{% else %}
esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
      # Those help boost the FPS by ~10
      CONFIG_COMPILER_OPTIMIZATION_PERF: y
      CONFIG_LV_ATTRIBUTE_FAST_MEM_USE_IRAM: y
      CONFIG_ESP_MAIN_TASK_AFFINITY_CPU1: y
      CONFIG_LV_MEMCPY_MEMSET_STD: y
      CONFIG_LV_DISP_DEF_REFR_PERIOD: '10'

psram:
  speed: 80MHz
  mode: octal
{% endif %}

# Enable logging
logger:
  level: DEBUG 

debug:
  update_interval: 30s

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

{% if not local_run %}
ota:
  - platform: esphome
    password: !secret ota_password

mdns:
  disabled: false
  
wifi:
  power_save_mode: none
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Hvaccontroller Fallback Hotspot"
    password: "rh2WHXSYMT7o"

external_components:
  - source: github://sEbola76/Makerfabs
    components: [ cst826 ]

captive_portal:

binary_sensor:
  - platform: gpio
    name: Button
    id: front_button
    pin: 
      number: GPIO14
      inverted: true
    on_click:
      then:
        - logger.log: "Button clicked!"

i2c:
  - id: i2c_bus
    sda: 17
    scl: 18
    scan: true
    frequency: 400kHz

light:
  - platform: monochromatic
    name: "Backlight"
    output: backlight_output
    id: display_backlight
    restore_mode: ALWAYS_ON
    
output:
  - platform: ledc
    pin: GPIO38
    id: backlight_output

sensor:
  - platform: rotary_encoder
    id: encoder
    pin_a: GPIO10
    pin_b: GPIO13
    on_clockwise:
      then:
        - if:
            condition: lvgl.is_paused
            then:
              - lvgl.page.show: main_page
              - light.turn_on: display_backlight
              - lvgl.resume:
              - lvgl.widget.redraw:
        - logger.log: "Turned clockwise"
        - if:
            condition: 
              lambda: return id(current_control) == "hvac";
            then:
              - lambda: id(script_dispatcher).execute(str_sprintf("%s_temperature_meter_increase",id(current_room).c_str()));
    on_anticlockwise:
      then:
        - if:
            condition: lvgl.is_paused
            then:
              - lvgl.page.show: main_page
              - light.turn_on: display_backlight
              - lvgl.resume:
              - lvgl.widget.redraw:
        - logger.log: "Turned anti-clockwise"
        - if:
            condition: 
              lambda: return id(current_control) == "hvac";
            then:
              - lambda: id(script_dispatcher).execute(str_sprintf("%s_temperature_meter_decrease",id(current_room).c_str()));

spi:
  id: spi_bus
  mosi_pin: GPIO0
  clk_pin: GPIO46
{% endif %}

time:
  - platform: homeassistant
    id: esptime

touchscreen:
{% if local_run %}
  id: touch
  platform: sdl
{% else %}
touchscreen:
  platform: cst826
  id: touch
  #interrupt_pin: GPIO40
  #reset_pin: GPIO16
  i2c_id: i2c_bus
  skip_probe: True
  update_interval: 25ms
  #touch_timeout: 5ms
{% endif %}
  on_touch:
    - logger.log:
        format: Touch at (%d, %d)
        args: [touch.x, touch.y]
    - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
            );
    - lvgl.label.update:
        id: coord_text
        text: !lambda return str_sprintf("Touch points:\n id=%d x=%d, y=%d", touches[0].id, touches[0].x, touches[0].y);
{% if not local_run %}
  on_release:
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.page.show: main_page
            - light.turn_on: display_backlight
            - lvgl.resume:
            - lvgl.widget.redraw:
{% endif %}

{% if local_run %}
display:
  - platform: sdl
    id: round_display
    # show_test_card: true
    dimensions:
      width: 480
      height: 480
{% else %}
display:
  - platform: st7701s
    id: round_display
    auto_clear_enabled: false
    color_order: rgb
    data_rate: 10MHz
    spi_mode: MODE3
    dimensions:
      width: 480
      height: 480
    cs_pin: GPIO1
    #reset_pin: GPIO
    de_pin: GPIO2
    hsync_pin: GPIO3
    vsync_pin: GPIO42
    pclk_pin: GPIO45
    pclk_frequency: 12MHz
    pclk_inverted: false
    hsync_front_porch: 10
    hsync_pulse_width: 8
    hsync_back_porch: 50
    vsync_front_porch: 10
    vsync_pulse_width: 8
    vsync_back_porch: 20
    data_pins:
      red:
        - 11        #r1
        - 15        #r2
        - 12        #r3
        - 16        #r4
        - 21        #r5
      green:
        - 39        #g0
        - 07        #g1
        - 47        #g2
        - 08        #g3
        - 48        #g4
        - 09        #g5
      blue:
        - 04        #b1
        - 41        #b2
        - 05        #b3
        - 40        #b4
        - 06        #b5
    init_sequence:
      - [0x01]
      - delay 120ms
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10]
      - [0xC0, 0x3B, 0x00]
      - [0xC1, 0x0B, 0x02]
      - [0xC2, 0x00, 0x02]
      - [0xCC, 0x10]
      - [0xCD, 0x08]
      - [0xB0, 0x02, 0x13, 0x1B, 0x0D, 0x10, 0x05, 0x08, 0x07, 0x07, 0x24, 0x04, 0x11, 0x0E, 0x2C, 0x33, 0x1D]
      - [0xB1, 0x05, 0x13, 0x1B, 0x0D, 0x11, 0x05, 0x08, 0x07, 0x07, 0x24, 0x04, 0x11, 0x0E, 0x2C, 0x33, 0x1D]
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x11]
      - [0xB0, 0x5d]
      - [0xB1, 0x43]
      - [0xB2, 0x81]
      - [0xB3, 0x80]
      - [0xB5, 0x43]
      - [0xB7, 0x85]
      - [0xB8, 0x20]
      - [0xC1, 0x78]
      - [0xC2, 0x78]
      - [0xD0, 0x88]
      - [0xE0, 0x00, 0x00, 0x02]
      - [0xE1, 0x03, 0xA0, 0x00, 0x00, 0x04, 0xA0, 0x00, 0x00, 0x00, 0x20, 0x20]
      - [0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - [0xE3, 0x00, 0x00, 0x11, 0x00]
      - [0xE4, 0x22, 0x00]
      - [0xE5, 0x05, 0xEC, 0xA0, 0xA0, 0x07, 0xEE, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - [0xE6, 0x00, 0x00, 0x11, 0x00]
      - [0xE7, 0x22, 0x00]
      - [0xE8, 0x06, 0xED, 0xA0, 0xA0, 0x08, 0xEF, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - [0xEB, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00]
      - [0xEd, 0xFF, 0xFF, 0xFF, 0xBA, 0x0A, 0xBF, 0x45, 0xFF, 0xFF, 0x54, 0xFB, 0xA0, 0xAB, 0xFF, 0xFF, 0xFF]
      - [0xEF, 0x10, 0x0D, 0x04, 0x08, 0x3F, 0x1F]
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x13]
      - [0xEF, 0x08]
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x00]
      - [0x36, 0x08]
      - [0x3A, 0x60]
      - [0x11]
      - delay 100ms
      - [0x29]
      - delay 50ms
{% endif %}

# TODO: Move to the component auto collected globals
font: 
  - file: "gfonts://Material+Symbols+Outlined"
    id: icons_28
    size: 28
    glyphs: [
      "\U0000e333", # TV
      "\U0000ea45", # King Bed
      "\U0000eb47" # Kitchen 
    ]

{% set TV_ICON="\ue333" %}
{% set KING_BED_ICON="\uea45" %}
{% set KITCHEN_ICON="\ueb47" %}

time:
  - platform: homeassistant
    id: homeassistant_time
    # on_time_sync:
    #   - script.execute: time_update
    #   - if:
    #       condition:
    #         lambda: 'return id(device_last_restart).state == "";'
    #       then:
    #         - text_sensor.template.publish:
    #             id: device_last_restart
    #             state: !lambda 'return id(homeassistant_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'

globals:
  - id: current_control
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: current_room
    type: std::string
    restore_value: no
    initial_value: '""'

{#
# FPS Count
globals:
  - id: frame_count
    type: int
    restore_value: no
    initial_value: '0'
  - id: fps
    type: int
    restore_value: no
    initial_value: '0'

interval:
  - interval: 16ms
    then:
      - lambda: |-
          id(frame_count)++;
  - interval: 1s
    then:
      - lambda: |-
          id(fps) = id(frame_count);
          id(frame_count) = 0;
          ESP_LOGI("fps", "FPS: %d", id(fps));
#}

{#
interval:
  - !include components/interval/arc_countdown1_controller.yaml
  - interval: 500ms
    then:
      - lambda: |-
          // Smoothly increment current_arc_value towards target
          id(current_arc_value) = (id(current_arc_value) + 1) % 10;
          lv_arc_set_value(id(arc_id), id(current_arc_value));
  - interval: 5000ms
    then:
      lvgl.page.next:
#}

{% macro generate_swap_events_handlers(page_id) %}
{% set page_groups = [['main_page', 'test_page'], ['hvac_controller_bedroom', 'hvac_controller_living_room']] %}
on_swipe_right:
  lvgl.page.previous:
    animation: MOVE_RIGHT
    time: 300ms
on_swipe_left:
  lvgl.page.next:
    animation: MOVE_LEFT
    time: 300ms
on_swipe_up:
  - lambda: |-
{% for group in page_groups if page_id in group %}
  {% for page in group %}
      id({{ page }}).skip = true;
  {% endfor %}
{% endfor %}

{% set next_group_idx = 0 %}
{% for group in page_groups %}
  {% if page_id in group %}
    {% set next_group_idx = loop.index-2 %}
    {% if next_group_idx < 0 %}
      {% set next_group_idx = 1 %}
    {% endif %}
    {% for page in page_groups[next_group_idx] %}
      id({{ page }}).skip = false;
    {% endfor %}
  {% endif %}
{% endfor %}
  - lvgl.page.next:
      animation: OUT_TOP
      time: 300ms
on_swipe_down:
  - lambda: |-
{% for group in page_groups if page_id in group %}
  {% for page in group %}
      id({{ page }}).skip = true;
  {% endfor %}
{% endfor %}

{% for group in page_groups %}
  {% if page_id in group %}
    {% set prev_group_idx = loop.index %}
    {% if prev_group_idx > 1 %}
      {% set prev_group_idx = 0 %}
    {% endif %}
    {% for page in page_groups[prev_group_idx] %}
      id({{ page }}).skip = false;
    {% endfor %}
  {% endif %}
{% endfor %}
  - lvgl.page.previous:
      animation: OUT_BOTTOM
      time: 300ms
{% endmacro %}

{% macro generate_on_load_globals_set(control, room) %}
- globals.set:
    id: current_control
    value: '"{{ control }}"'
- globals.set:
    id: current_room
    value: '"{{ room }}"'
{% endmacro %}

# LVGL Configuration
lvgl:
  - id: lvgl_display
    displays:
      - round_display
    touchscreens:
      - touch
    buffer_size: 100%
    bg_color: Black
    theme:
      obj:
        pad_all: 0
        border_width: 0
{% if not local_run %}
    encoders:
      group: empty
      sensor: encoder
      enter_button: front_button
    on_idle:
      - timeout: 20s
        then:
          - logger.log: idle 20s timeout
          - lvgl.pause:
          - light.turn_off:
              id: display_backlight
              transition_length: 5s
{% endif %}
    page_wrap: true
    pages:
      - id: main_page
        on_load:
          then:
            - logger.log: "🚀 main page loaded!"
            {{ generate_on_load_globals_set('', '') | indent(12) }}
        {{ generate_swap_events_handlers('main_page') | indent(8) }}
        width: 100%
        bg_color: Black
        widgets:
          - label:
              id: coord_text
              align: CENTER
              text_align: CENTER
              text: 'Touch the screen'
              text_color: White
      - id: test_page
        on_load:
          then:
            - logger.log: "🚀 test page loaded!"
            {{ generate_on_load_globals_set('', '') | indent(12) }}
        {{ generate_swap_events_handlers('test_page') | indent(8) }}
        width: 100%
        bg_color: Black
        widgets:
          - label:
              id: test_label
              align: CENTER
              text_align: CENTER
              text: 'Test Page'
              text_color: White

      - id: hvac_controller_living_room
        skip: true
        on_load:
          then:
            - logger.log: "hvac_controller_living_room page loaded"
            {{ generate_on_load_globals_set('hvac', 'living_room') | indent(12) }}
        {{ generate_swap_events_handlers('hvac_controller_living_room') | indent(8) }}
        width: 100%
        bg_color: Black
        widgets:
          - {{ room_hvac_controller("living_room", title="Living Room", room_icon=TV_ICON, macros=macros) | indent(12) }}
      - id: hvac_controller_bedroom
        skip: true
        on_load:
          then:
            - logger.log: "hvac_controller_bedroom page loaded"
            {{ generate_on_load_globals_set('hvac', 'bedroom') | indent(12) }}
        {{ generate_swap_events_handlers('hvac_controller_bedroom') | indent(8) }}
        width: 100%
        bg_color: Black
        widgets:
          - {{ room_hvac_controller("bedroom", title="Bedroom", room_icon=KING_BED_ICON, macros=macros) | indent(12) }}