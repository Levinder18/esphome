{#
  TemperatureArc Component Macro for SVGL/LVGL UI
  Displays a circular arc showing the current target temperature, with an overlay label for the value.
  Usage: {{ temperature_arc(id, value_source, min=16, max=30, color=None) }}
#}
{% macro temperature_arc(id, initial_value, min=16, max=28, arc_width=450, arc_height=450, arc_color=None, bg_color=None) %}
{% set auto = {
    "globals": [
        {    
            'id': id ~ '_arc_value',
            'type': 'float',
            'initial_value': initial_value
        }
    ],
    "script": [
        {
            'id': id ~ '_increase',
            'then': [
                {
                    'if': {
                        'condition': {
                            'lambda': 'return id(' ~ id ~ '_arc_value) < ' ~ max ~ ';'
                        },
                        'then': [
                            { 'logger.log': 'Increasing arc ' ~ id },
                            {
                                'script.execute': {
                                    'id': id ~ '_set',
                                    'value': '!lambda return id(' ~ id ~ '_arc_value) + 1;'
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            'id': id ~ '_decrease',
            'then': [
                {
                    'if': {
                        'condition': {
                            'lambda': 'return id(' ~ id ~ '_arc_value) > ' ~ min ~ ';'
                        },
                        'then': [
                            { 'logger.log': 'Decreasing arc ' ~ id },
                            {
                                'script.execute': {
                                    'id': id ~ '_set',
                                    'value': '!lambda return id(' ~ id ~ '_arc_value) - 1;'
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            'id': id ~ '_set_value',
            'parameters': {
                'value': 'float'
            },
            'then': [
                { 'logger.log': {
                    'format': 'Setting arc ' ~ id ~ 'value to %.1f',
                    'args': [ 'value' ]
                    }
                },
                {
                    'lambda': lambda_multiline_body('''
                        lv_arc_set_value(id(' ~ id ~ '), value);
                    ''')
                }
            ]
        },
        {
            'id': id ~ '_set_global_and_label',
            'parameters': {
                'value': 'float'
            },
            'then': [
                { 'logger.log': {
                        'format': 'Setting arc ' ~ id ~ ' global and label to %.1f',
                        'args': [ 'value' ]
                    }
                },
                {
                    'globals.set': {
                        'id': id ~ '_arc_value',
                        'value': '!lambda return value;'
                    }
                },
                {
                    'lvgl.label.update': {
                        'id': id ~ '_value',
                        'text': '!lambda return str_sprintf("%.1f", id(' ~ id ~ '_arc_value) / 2.0);'
                    }
                }
            ]
        },
        {
            'id': id ~ '_set',
            'parameters': {
                'value': 'float'
            },
            'then': [
                {
                    'script.execute': {
                        'id': id ~ '_set_global_and_label',
                        'value': '!lambda return value;'
                    }
                },
                {
                    'script.execute': {
                        'id': id ~ '_set_value',
                        'value': '!lambda return value;'
                    }
                }
            ]
        },
    ]
} %}
{% do register_component(id=id, auto_collected=auto) %}
obj:
  width: 100%
  height: 100%
  bg_color: Black
  widgets:
    - arc:
        id: {{ id }}
        min_value: {{ min * 2 }}
        max_value: {{ max * 2 }}
        width: {{ arc_width }}
        height: {{ arc_height }}
        value: {{ initial_value }}
        align: CENTER
        {% if arc_color %}
        arc_color: {{ arc_color }}
        {% endif %}
        {% if bg_color %}
        bg_color: {{ bg_color }}
        {% endif %}
        start_angle: 45
        end_angle: 315
        radius: 180
        rotation: 90
        adjustable: true
        on_change:
            - script.execute: 
                id: {{ id }}_set_global_and_label
                value: !lambda return x;
    - label:
        id: {{ id }}_value
        text: {{ initial_value }}
        align: CENTER
        text_color: White
{% endmacro %}
